// DEV NOTE: hard-coded preprocessor directives only for hand-compiled version, remove in auto-compiled version
// [[[ PREPROCESSOR ]]]
#define __PERL__TYPES 1
#undef __CPP__TYPES

// [[[ HEADER ]]]
using std::cout;  using std::cerr;  using std::endl;

#ifndef __CPP__INCLUDED__RPerl__Algorithm__Sort__Bubble_h
#define __CPP__INCLUDED__RPerl__Algorithm__Sort__Bubble_h 0.010_000

// [[[ INCLUDES & OO INHERITANCE INCLUDES ]]]
#include <RPerl.cpp>  // -> RPerl.h -> (rperltypes_mode.h; rperloperations.h; rperltypes.h; HelperFunctions.cpp)
#include <RPerl/Algorithm/Sort.cpp>

# ifdef __PERL__TYPES

// [[[<<< BEGIN PERL TYPES >>>]]]
// [[[<<< BEGIN PERL TYPES >>>]]]
// [[[<<< BEGIN PERL TYPES >>>]]]

// [[[ CONSTANTS ]]]
const SV* RPerl__Algorithm__Sort__Bubble__TIME_BEST = (const SV*) newSVpvs("O($n)");
const SV* RPerl__Algorithm__Sort__Bubble__TIME_AVERAGE = (const SV*) newSVpvs("O($n ** 2)");
const SV* RPerl__Algorithm__Sort__Bubble__TIME_WORST = (const SV*) newSVpvs("O($n ** 2)");
const SV* RPerl__Algorithm__Sort__Bubble__SPACE_WORST = (const SV*) newSVpvs("O(1)");

// [[[ OO INHERITANCE ]]]

class RPerl__Algorithm__Sort__Bubble : public RPerl__Algorithm__Sort {
public:
    // [[[ OO PROPERTIES ]]]
    SV* integer_data;
    SV* number_data;

    // [[[ OO METHODS ]]]

    // <<< OO PROPERTIES, ACCESSORS & MUTATORS >>>
    SV* get_integer_data() { return SvREFCNT_inc(this->integer_data); }
    void set_integer_data(SV* integer_data_new) { this->integer_data = integer_data_new; }
    SV* get_number_data() { return SvREFCNT_inc(this->number_data); }
    void set_number_data(SV* number_data_new) { this->number_data = number_data_new; }
    SV* get_foo() { return SvREFCNT_inc(this->foo); }
    void set_foo(SV* foo_new) { this->foo = foo_new; }

    // <<< CONSTRUCTOR & DESTRUCTOR >>>
    RPerl__Algorithm__Sort__Bubble() {}
    ~RPerl__Algorithm__Sort__Bubble() {}

    // <<< CLASS NAME REPORTER >>>
    virtual SV* myclassname() { return newSVpvs("RPerl::Algorithm::Sort::Bubble"); }

    // <<< CONSTANTS, SHIMS >>>
    const SV* TIME_BEST() { return RPerl__Algorithm__Sort__Bubble__TIME_BEST; }
    const SV* TIME_AVERAGE() { return RPerl__Algorithm__Sort__Bubble__TIME_AVERAGE; }
    const SV* TIME_WORST() { return RPerl__Algorithm__Sort__Bubble__TIME_WORST; }
    const SV* SPACE_WORST() { return RPerl__Algorithm__Sort__Bubble__SPACE_WORST; }

    // <<< USER-DEFINED METHODS >>>
    void integer_sort();
    void number_sort();
    void inherited__Bubble(SV* person);
    SV* inherited__Bubble_foo_get();
    void inherited__Bubble_foo_set(SV* foo_new);
    void inherited(SV* person);
};  // end of class

// [[[ OO SUBCLASSES ]]]
#define RPerl__Algorithm__Sort__Bubble_rawptr RPerl__Algorithm__Sort__Bubble*
typedef std::unique_ptr<RPerl__Algorithm__Sort__Bubble> RPerl__Algorithm__Sort__Bubble_ptr;
typedef std::vector<RPerl__Algorithm__Sort__Bubble_ptr> RPerl__Algorithm__Sort__Bubble_arrayref;
typedef std::unordered_map<string, RPerl__Algorithm__Sort__Bubble_ptr> RPerl__Algorithm__Sort__Bubble_hashref;
typedef std::unordered_map<string, RPerl__Algorithm__Sort__Bubble_ptr>::iterator RPerl__Algorithm__Sort__Bubble_hashref_iterator;

// [[[ SUBROUTINES ]]]
SV* RPerl__Algorithm__Sort__Bubble__integer_bubblesort(SV* integer_data);
SV* RPerl__Algorithm__Sort__Bubble__number_bubblesort(SV* number_data);
SV* RPerl__Algorithm__Sort__Bubble__uninherited__Bubble(SV* person);
SV* RPerl__Algorithm__Sort__Bubble__uninherited(SV* person);
SV* RPerl__Algorithm__Sort__Bubble__integer_bubblesort__typetest0(SV* lucky_integers);
SV* RPerl__Algorithm__Sort__Bubble__number_bubblesort__typetest0(SV* lucky_numbers);

// <<< SHIM MACROS >>>
#define integer_bubblesort(integer_data) RPerl__Algorithm__Sort__Bubble__integer_bubblesort(integer_data)
#define number_bubblesort(number_data) RPerl__Algorithm__Sort__Bubble__number_bubblesort(number_data)
#define uninherited__Bubble(person) RPerl__Algorithm__Sort__Bubble__uninherited__Bubble(person)
#define uninherited(person) RPerl__Algorithm__Sort__Bubble__uninherited(person)
#define integer_bubblesort__typetest0(lucky_integers) RPerl__Algorithm__Sort__Bubble__integer_bubblesort__typetest0(lucky_integers)
#define number_bubblesort__typetest0(lucky_numbers) RPerl__Algorithm__Sort__Bubble__number_bubblesort__typetest0(lucky_numbers)

// <<< OPERATIONS & DATA TYPES REPORTER >>>
SV* RPerl__Algorithm__Sort__Bubble__MODE_ID() { return newSViv(1); }  // CPPOPS_PERLTYPES is 1

// [[[<<< END PERL TYPES >>>]]]
// [[[<<< END PERL TYPES >>>]]]
// [[[<<< END PERL TYPES >>>]]]

# elif defined __CPP__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____CPP__TYPES_being_defined.__We_need_to_define_only___PERL__TYPES_in_this_file!

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___PERL__TYPES_in_this_file!

# endif

#endif
