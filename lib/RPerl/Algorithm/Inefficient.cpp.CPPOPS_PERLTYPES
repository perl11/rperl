// [[[ HEADER ]]]
using std::cout;  using std::cerr;  using std::endl;

#ifndef __CPP__INCLUDED__RPerl__Algorithm__Inefficient_cpp
#define __CPP__INCLUDED__RPerl__Algorithm__Inefficient_cpp 0.011_000

// [[[ INCLUDES ]]]
#include <RPerl/Algorithm/Inefficient.h>

# ifdef __PERL__TYPES

// [[[<<< BEGIN PERL TYPES >>>]]]
// [[[<<< BEGIN PERL TYPES >>>]]]
// [[[<<< BEGIN PERL TYPES >>>]]]

// [[[ SUBROUTINES & OO METHODS ]]]

void RPerl__Algorithm__Inefficient::inherited__Inefficient(SV* person) {
    cout << "in CPPOPS_PERLTYPES Inefficient->inherited__Inefficient(), have ::class($self) = " << SvPV_nolen(classname(this)) << " and $person = " << SvPV_nolen(person) << ", FLUFFY" << "\n";
}

SV* RPerl__Algorithm__Inefficient::inherited__Inefficient_bar_get() {
    cout << "in CPPOPS_PERLTYPES Inefficient->inherited__Inefficient_bar_get(), have ::class($self) = " << SvPV_nolen(classname(this)) << ", FLUFFY" << "\n";
    return SvREFCNT_inc(this->bar);
}

void RPerl__Algorithm__Inefficient::inherited__Inefficient_bar_set(SV* bar_new) {
    cout << "in CPPOPS_PERLTYPES Inefficient->inherited__Inefficient_bar_set(), have ::class($self) = " << SvPV_nolen(classname(this)) << " and $bar_new = " << SvPV_nolen(bar_new) << ", FLUFFY" << "\n";
    this->bar = bar_new;
}

SV* RPerl__Algorithm__Inefficient::inherited__Inefficient_foo_get() {
    cout << "in CPPOPS_PERLTYPES Inefficient->inherited__Inefficient_foo_get(), have ::class($self) = " << SvPV_nolen(classname(this)) << ", FLUFFY" << "\n";
    return SvREFCNT_inc(this->foo);
}

void RPerl__Algorithm__Inefficient::inherited__Inefficient_foo_set(SV* foo_new) {
    cout << "in CPPOPS_PERLTYPES Inefficient->inherited__Inefficient_foo_set(), have ::class($self) = " << SvPV_nolen(classname(this)) << " and $foo_new = " << SvPV_nolen(foo_new) << ", FLUFFY" << "\n";
    this->foo = foo_new;
}

void RPerl__Algorithm__Inefficient::inherited(SV* person) {
    cout << "in CPPOPS_PERLTYPES Inefficient->inherited(), have ::class($self) = " << SvPV_nolen(classname(this)) << " and $person = " << SvPV_nolen(person) << ", INCOMPATIBLE" << "\n";
}

SV* RPerl__Algorithm__Inefficient__uninherited__Inefficient(SV* person) {
    cout << "in CPPOPS_PERLTYPES Inefficient::uninherited__Inefficient(), received $person = " << SvPV_nolen(person) << ", MESSY" << "\n";
    return newSVpvs("Inefficient::uninherited__Inefficient() RULES! CPPOPS_PERLTYPES");
}

// [[[<<< END PERL TYPES >>>]]]
// [[[<<< END PERL TYPES >>>]]]
// [[[<<< END PERL TYPES >>>]]]

# elif defined __CPP__TYPES

#error  __CPP__TYPES defined, but we need ___PERL__TYPES

# else

#error  ___PERL__TYPES not defined

# endif

#endif
