// [[[ HEADER ]]]
using std::cout;  using std::cerr;  using std::endl;

#ifndef __CPP__INCLUDED__RPerl__Algorithm__Sort_h
#define __CPP__INCLUDED__RPerl__Algorithm__Sort_h 0.010_000

// [[[ INCLUDES & OO INHERITANCE INCLUDES ]]]
#include <RPerl.cpp>  // -> RPerl.h -> (rperltypes_mode.h; rperloperations.h; rperltypes.h; HelperFunctions.cpp)
#include <RPerl/Algorithm.cpp>

# ifdef __PERL__TYPES

// [[[<<< BEGIN PERL TYPES >>>]]]
// [[[<<< BEGIN PERL TYPES >>>]]]
// [[[<<< BEGIN PERL TYPES >>>]]]

// [[[ OO INHERITANCE ]]]
class RPerl__Algorithm__Sort : public RPerl__Algorithm {
public:
    // [[[ OO METHODS ]]]

    // <<< OO PROPERTIES, ACCESSORS & MUTATORS >>>
    SV* get_foo() { return SvREFCNT_inc(this->foo); }
    void set_foo(SV* foo_new) { this->foo = foo_new; }

    // <<< CONSTRUCTOR & DESTRUCTOR >>>
    RPerl__Algorithm__Sort() {}
    ~RPerl__Algorithm__Sort() {}

    // <<< CLASS NAME REPORTER >>>
    virtual SV* myclassname() { return newSVpvs("RPerl::Algorithm::Sort"); }

    // <<< USER-DEFINED METHODS >>>
    void inherited__Sort(SV* person);
    SV* inherited__Sort_foo_get();
    void inherited__Sort_foo_set(SV* foo_new);
};  // end of class

// [[[ OO SUBCLASSES ]]]
#define RPerl__Algorithm__Sort_rawptr RPerl__Algorithm__Sort*
typedef std::unique_ptr<RPerl__Algorithm__Sort> RPerl__Algorithm__Sort_ptr;
typedef std::vector<RPerl__Algorithm__Sort_ptr> RPerl__Algorithm__Sort_arrayref;
typedef std::unordered_map<string, RPerl__Algorithm__Sort_ptr> RPerl__Algorithm__Sort_hashref;
typedef std::unordered_map<string, RPerl__Algorithm__Sort_ptr>::iterator RPerl__Algorithm__Sort_hashref_iterator;

// [[[ SUBROUTINES ]]]
SV* RPerl__Algorithm__Sort__uninherited__Sort(SV* person);

// <<< SHIM MACROS >>>
#define uninherited__Sort(person) RPerl__Algorithm__Sort__uninherited__Sort(person)

// <<< OPERATIONS & DATA TYPES REPORTER >>>
SV* RPerl__Algorithm__Sort__MODE_ID() { return newSViv(1); }  // CPPOPS_PERLTYPES is 1

// [[[<<< END PERL TYPES >>>]]]
// [[[<<< END PERL TYPES >>>]]]
// [[[<<< END PERL TYPES >>>]]]

# elif defined __CPP__TYPES

// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]

// [[[ OO INHERITANCE ]]]
class RPerl__Algorithm__Sort : public RPerl__Algorithm {
public:
    // [[[ OO METHODS ]]]

    // <<< OO PROPERTIES, ACCESSORS & MUTATORS >>>
    string get_foo() { return this->foo; }
    void set_foo(string foo_new) { this->foo = foo_new; }

    // <<< CONSTRUCTOR & DESTRUCTOR >>>
    RPerl__Algorithm__Sort() {}
    ~RPerl__Algorithm__Sort() {}

    // <<< CLASS NAME REPORTER >>>
    virtual string myclassname() { return (const string) "RPerl::Algorithm::Sort"; }

    // <<< USER-DEFINED METHODS >>>
    void inherited__Sort(string person);
    string inherited__Sort_foo_get();
    void inherited__Sort_foo_set(string foo_new);
};  // end of class

// [[[ OO SUBCLASSES ]]]
#define RPerl__Algorithm__Sort_rawptr RPerl__Algorithm__Sort*
typedef std::unique_ptr<RPerl__Algorithm__Sort> RPerl__Algorithm__Sort_ptr;
typedef std::vector<RPerl__Algorithm__Sort_ptr> RPerl__Algorithm__Sort_arrayref;
typedef std::unordered_map<string, RPerl__Algorithm__Sort_ptr> RPerl__Algorithm__Sort_hashref;
typedef std::unordered_map<string, RPerl__Algorithm__Sort_ptr>::iterator RPerl__Algorithm__Sort_hashref_iterator;

// [[[ SUBROUTINES ]]]
string RPerl__Algorithm__Sort__uninherited__Sort(string person);

// <<< SHIM MACROS >>>
#define uninherited__Sort(person) RPerl__Algorithm__Sort__uninherited__Sort(person)

// <<< OPERATIONS & DATA TYPES REPORTER >>>
integer RPerl__Algorithm__Sort__MODE_ID() { return 2; }  // CPPOPS_CPPTYPES is 2

// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_exactly_one!

# endif

#endif
