// [[[ HEADER ]]]
using std::cout;  using std::cerr;  using std::endl;

#ifndef __CPP__INCLUDED__RPerl__Algorithm__Inefficient_h
#define __CPP__INCLUDED__RPerl__Algorithm__Inefficient_h 0.011_000

// [[[ INCLUDES & OO INHERITANCE INCLUDES ]]]
#include <RPerl.cpp>  // -> RPerl.h -> (rperltypes_mode.h; rperloperations.h; rperltypes.h; HelperFunctions.cpp)
#include <RPerl/Algorithm.cpp>

# ifdef __PERL__TYPES

// [[[<<< BEGIN PERL TYPES >>>]]]
// [[[<<< BEGIN PERL TYPES >>>]]]
// [[[<<< BEGIN PERL TYPES >>>]]]

// [[[ CONSTANTS ]]]
const SV* RPerl__Algorithm__Inefficient__USEFULNESS = (const SV*) newSVpvs("<<< UNKNOWN >>>");

// [[[ OO INHERITANCE ]]]
class RPerl__Algorithm__Inefficient : public RPerl__Algorithm {
public:
    // [[[ OO PROPERTIES ]]]
    SV* bar = newSVpvs("<<< DEFAULT, INEFFICIENT >>>");

    // [[[ OO METHODS ]]]

    // <<< OO PROPERTIES, ACCESSORS & MUTATORS >>>
    SV* get_bar() { return SvREFCNT_inc(this->bar); }
    void set_bar(SV* bar_new) { this->bar = bar_new; }
    SV* get_foo() { return SvREFCNT_inc(this->foo); }
    void set_foo(SV* foo_new) { this->foo = foo_new; }

    // <<< CONSTRUCTOR & DESTRUCTOR >>>
    RPerl__Algorithm__Inefficient() {}
    ~RPerl__Algorithm__Inefficient() {}

    // <<< CLASS NAME REPORTER >>>
    virtual SV* myclassname() { return newSVpvs("RPerl::Algorithm::Inefficient"); }

    // <<< CONSTANTS, SHIMS >>>
    const SV* USEFULNESS() { return RPerl__Algorithm__Inefficient__USEFULNESS; }

    // <<< USER-DEFINED METHODS >>>
    void inherited__Inefficient(SV* person);
    SV* inherited__Inefficient_bar_get();
    void inherited__Inefficient_bar_set(SV* bar_new);
    SV* inherited__Inefficient_foo_get();
    void inherited__Inefficient_foo_set(SV* foo_new);
    void inherited(SV* person);
};  // end of class

// [[[ OO SUBCLASSES ]]]
#define RPerl__Algorithm__Inefficient_rawptr RPerl__Algorithm__Inefficient*
typedef std::unique_ptr<RPerl__Algorithm__Inefficient> RPerl__Algorithm__Inefficient_ptr;
typedef std::vector<RPerl__Algorithm__Inefficient_ptr> RPerl__Algorithm__Inefficient_arrayref;
typedef std::unordered_map<string, RPerl__Algorithm__Inefficient_ptr> RPerl__Algorithm__Inefficient_hashref;
typedef std::unordered_map<string, RPerl__Algorithm__Inefficient_ptr>::iterator RPerl__Algorithm__Inefficient_hashref_iterator;

// [[[ SUBROUTINES ]]]
SV* RPerl__Algorithm__Inefficient__uninherited__Inefficient(SV* person);

// <<< SHIM MACROS >>>
#define uninherited__Inefficient(person) RPerl__Algorithm__Inefficient__uninherited__Inefficient(person)

// <<< OPERATIONS & DATA TYPES REPORTER >>>
SV* RPerl__Algorithm__Inefficient__MODE_ID() { return newSViv(1); }  // CPPOPS_PERLTYPES is 1

// [[[<<< END PERL TYPES >>>]]]
// [[[<<< END PERL TYPES >>>]]]
// [[[<<< END PERL TYPES >>>]]]

# elif defined __CPP__TYPES

#error  __CPP__TYPES defined, but we need ___PERL__TYPES

# else

#error  ___PERL__TYPES not defined

# endif

#endif
